import re
import os
import pandas as pd
import sys
import platform

#This script builds the gro file to be fed into ligpargen




def atomic_number_to_symbol(atomic_number):
            element_symbols = {
                1: 'H', 2: 'He', 3: 'Li', 4: 'Be', 5: 'B',
                6: 'C', 7: 'N', 8: 'O', 9: 'F', 10: 'Ne',
                11: 'Na', 12: 'Mg', 13: 'Al', 14: 'Si', 15: 'P',
                16: 'S', 17: 'Cl', 18: 'Ar', 19: 'K', 20: 'Ca',
                21: 'Sc', 22: 'Ti', 23: 'V', 24: 'Cr', 25: 'Mn',
                26: 'Fe', 27: 'Co', 28: 'Ni', 29: 'Cu', 30: 'Zn',
                31: 'Ga', 32: 'Ge', 33: 'As', 34: 'Se', 35: 'Br',
                36: 'Kr', 37: 'Rb', 38: 'Sr', 39: 'Y', 40: 'Zr',
                41: 'Nb', 42: 'Mo', 43: 'Tc', 44: 'Ru', 45: 'Rh',
                46: 'Pd', 47: 'Ag', 48: 'Cd', 49: 'In', 50: 'Sn',
                51: 'Sb', 52: 'Te', 53: 'I', 54: 'Xe', 55: 'Cs',
                56: 'Ba', 57: 'La', 58: 'Ce', 59: 'Pr', 60: 'Nd',
                61: 'Pm', 62: 'Sm', 63: 'Eu', 64: 'Gd', 65: 'Tb',
                66: 'Dy', 67: 'Ho', 68: 'Er', 69: 'Tm', 70: 'Yb',
                71: 'Lu', 72: 'Hf', 73: 'Ta', 74: 'W', 75: 'Re',
                76: 'Os', 77: 'Ir', 78: 'Pt', 79: 'Au', 80: 'Hg',
                81: 'Tl', 82: 'Pb', 83: 'Bi', 84: 'Po', 85: 'At',
                86: 'Rn', 87: 'Fr', 88: 'Ra', 89: 'Ac', 90: 'Th',
                91: 'Pa', 92: 'U', 93: 'Np', 94: 'Pu', 95: 'Am',
                96: 'Cm', 97: 'Bk', 98: 'Cf', 99: 'Es', 100: 'Fm',
                101: 'Md', 102: 'No', 103: 'Lr', 104: 'Rf', 105: 'Db',
                106: 'Sg', 107: 'Bh', 108: 'Hs', 109: 'Mt', 110: 'Ds',
                111: 'Rg', 112: 'Cn', 113: 'Nh', 114: 'Fl', 115: 'Mc',
                116: 'Lv', 117: 'Ts', 118: 'Og'
            }
            return element_symbols.get(atomic_number, "Unknown Symbol")

def write_geometries(file_out, start,stop): #writes gjf
    log_file = "Opt.log"

    with open(f'{file_out}.pdb', "w") as fout:
        fout.write(f"TITLE      Auto Generated from Opt.log\n")
        fout.write(f'REMARK   PDB FILE GENERATED BY make_base_pdb.PY BY N Lok\n')
        with open(log_file, "r") as fin:
            lines = fin.readlines()
            index = 1 
            for line_number, line in enumerate(lines, start=0):
                if line_number >= start and line_number <= stop:
                    line = line.split()
                    #print(line)
                    symbol = atomic_number_to_symbol(int(line[1]))
                    x = float(line[3])
                    y = float(line[4])
                    z = float(line[5])
                    line = f"{symbol:2}  {x:15.8f}  {y:15.8f}  {z:15.8f}\n"                
                    fout.write(f'HETATM{index:>5}{symbol:>3}           0    {x:>8.3f}{y:>8.3f}{z:>8.3f}                       {symbol}\n')
                    index += 1

                    

def mk_base(input_log_file,output_pdb_file):
    log_file =input_log_file
    new_opt_ptr = " Optimization completed."#This is where geometries start 
    start_new_geom_ptr = "                         Standard orientation:                         " #This is where cordinate data starts
    end_new_geom_ptr = " ---------------------------------------------------------------------"
    new_opt = False
    in_geom = False


    print("Searching for geometries in " + log_file +  "...")
    print("Found: \n")
    print("File|Start Line|End Line")
    with open(log_file, 'r') as input_file:
        lines = input_file.readlines()
    
    
    for line_number, line in enumerate(lines, start=0):
        match_new_opt = re.search(new_opt_ptr, line)
        match_new_geom = re.search(start_new_geom_ptr, line)
        match_end_geom = re.search(end_new_geom_ptr, line)
        if match_new_opt: #Double checks we have seen a new optimzation
            new_opt = True
        
        if new_opt and match_new_geom: #Finds where the geometry data from the new optimization section starts       
            start_geom = line_number + 5 #+4 to remove heading
            in_geom = True
        
        if new_opt and in_geom and match_end_geom and line_number > start_geom + 5: #Finds where the geometry data from the new optimization section ends (+6 to skip heading)
            end_geom = line_number
            new_opt = False
            in_geom = False
    file_name = output_pdb_file
    print(file_name,start_geom,end_geom) 
    write_geometries(file_name,start_geom,end_geom - 1)
            



if __name__ == "__main__":
    try:
        if len(sys.argv) != 3:
            print("Usage: python gjf_to_gro.py <input_gjf_file> <output_pdb_file>")
            TypeError

        input_log_file = sys.argv[1]
        output_pdb_file = sys.argv[2]
    except:
        input_log_file = "Opt.log"
        output_pdb_file = "Base"
    
    mk_base(input_log_file,output_pdb_file)
